<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:reg="http://www.dangdang.com/schema/ddframe/reg"
	xmlns:job="http://www.dangdang.com/schema/ddframe/job"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.dangdang.com/schema/ddframe/reg
                        http://www.dangdang.com/schema/ddframe/reg/reg.xsd
                        http://www.dangdang.com/schema/ddframe/job
                        http://www.dangdang.com/schema/ddframe/job/job.xsd
                        ">
                        
     <!-- 数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="maxActive" value="20" />
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxOpenPreparedStatements" value="20" />
	</bean>
     
	<!--配置作业注册中心 -->
	<reg:zookeeper id="regCenter" server-lists="${elaticjob.zookeeper.server-lists}"
		namespace="${elaticjob.zookeeper.namespace}"
		base-sleep-time-milliseconds="1000" max-sleep-time-milliseconds="3000"
		max-retries="3" />

	<!-- 配置作业 -->
	<job:simple id="myElasticJob" class="com.test.job.MyElasticJob"
		description="测试demo" registry-center-ref="regCenter" cron="0/7 * * * * ?"
		sharding-total-count="1" sharding-item-parameters="0=A"
		overwrite="true" failover="true" job-parameter="hello" event-trace-rdb-data-source="dataSource">
		<job:listener class="com.test.job.MyElasticJobListener"/>
		<!-- <job:distributed-listener started-timeout-milliseconds="10000" completed-timeout-milliseconds="10000" class="com.test.job.MyDistributeOnceElasticJobListener"/> -->
	</job:simple>
	
	<!-- 配置作业 -->
	<!-- <job:simple id="myElasticJob2" class="com.test.job.MyElasticJob2"
		description="测试demo2" registry-center-ref="regCenter" cron="0/5 * * * * ?"
		sharding-total-count="7" sharding-item-parameters="0=A,1=B,2=C,3=D,4=E,5=F,6=G,7=H"
		overwrite="true" failover="true" job-parameter="hello2"/> -->
		
	<!-- 配置作业 -->
	<!-- <job:simple id="myElasticJob3" class="com.test.job.MyElasticJob3"
		description="测试demo3" registry-center-ref="regCenter" cron="0/2 * * * * ?"
		sharding-total-count="4" sharding-item-parameters="0=A,1=B,2=C,3=D,4=E"
		overwrite="true" failover="true" job-parameter="hello3"/> -->

</beans>